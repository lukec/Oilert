#!/usr/bin/env perl
use 5.14.0;
use JSON qw/decode_json/;
use LWP::UserAgent;
use Dancer ':syntax';
use Cwd qw/realpath/;
use FindBin;
use lib "$FindBin::Bin/../lib";
use Oilert::ShipDatabase;
use Oilert::WorkQueue;
use AnyEvent;
use AnyEvent::Socket;
use Try::Tiny;

Dancer::Config::setting('appdir',realpath("$FindBin::Bin/.."));
config->{environment} = 'production' if -d '/home/dotcloud';
Dancer::Config::load();

$| = 1;

my $cv = AnyEvent->condvar;
my $w = AnyEvent->signal(signal => "INT", cb => sub {
        print "Sig INT received. Exiting.\n";
        $cv->send;
    });
my $shipdb = Oilert::ShipDatabase->new;
my $work_q = Oilert::WorkQueue->new;

use Inline Python => <<'END';
import ais
def decode_ais(line):
    return ais.decode(line)
END

my $aishub_watcher;
my $socket_guard;
my $last_rx_time;
my $aishub_fh;
sub connect_to_aishub {
    print "C";
    if ($socket_guard) {
        my $duration = time() - $last_rx_time;
        if ($duration > 20*60) {
            warn "Haven't received data in $duration seconds, disconnecting.";
            $socket_guard = undef;
            $aishub_watcher = undef;
            close $aishub_fh;
        }
    }
    $socket_guard ||= tcp_connect 'data.aishub.net' => 4275, sub {
        my $aishub_fh = shift or die "Could not connect to aishub: $!";
        warn "Connected to aishub.\n";
        $aishub_watcher = AnyEvent->io(
            fh => $aishub_fh,
            poll => 'r',
            cb => sub {
                try {
                    while (my $line = <$aishub_fh>) {
                        $last_rx_time = time();
                        # warn "AISHUB: $line";
                        my @d = split ',', $line;
                        return unless @d > 1 and $d[1] == 1 and $d[2] == 1;
                        my $msg = eval { decode_ais($d[5]) };
                        return unless $msg;
                        return unless $msg->{id} =~ m/^[123]$/;

                        my $mmsi = $msg->{mmsi};
                        if ($shipdb->should_ignore($mmsi)) {
                            print ".";
                            next;
                        }
                        my $new_ship = $shipdb->get_ship($mmsi);
                        unless ($new_ship->is_important) {
                            $shipdb->ignore($mmsi);
                            print " (IGNORE:$mmsi:" . $new_ship->type . ") ";
                            next;
                        }
                        $new_ship->lat($msg->{y});
                        $new_ship->lon($msg->{x});
                        $new_ship->speed($msg->{nav_status} == 1 ? 0 : $msg->{sog});
                        $shipdb->save($new_ship);
                    }
                }
                catch {
                    die "Failed: $_";
                };
            },
        );
    };
}
my $reconnect_timer = AnyEvent->timer(
    after => 0.01, interval => 900.0,
    cb => \&connect_to_aishub,
);

my $job_timer = AnyEvent->timer(after => 1, interval => 5,
    cb => sub { $work_q->run_jobs() }
);
my $restart_timer = AnyEvent->timer(after => 7200, interval => 0,
    cb => sub {
        print "Hit 2 hour limit.\n";
        $cv->send;
    },
);

$cv->recv;
